// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// FlutterSecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    246,
    177,
    235,
    68,
    18,
    42,
    75,
    26,
    219,
    163,
    87,
    205,
    202,
    179,
    120,
    58,
    17,
    151,
    69,
    215,
    46,
    218,
    113,
    59,
    88,
    104,
    221,
    131,
    203,
    94,
    3,
    83,
    228,
    89,
    127,
    186,
    209,
    210,
    72,
    84,
    98,
    114,
    89,
    180,
    55,
    250,
    143,
    219,
    55,
    77,
    87,
    80,
    246,
    198,
    187,
    182,
    137,
    35,
    58,
    92,
    72,
    212,
    202,
    96,
    244,
    193,
    13,
    198,
    211,
    144,
    221,
    18,
    117,
    182,
    158,
    119,
    19,
    189,
    230,
    31,
    29,
    249,
    178,
    113,
    119,
    114,
    177,
    110,
    96,
    184,
    49,
    11,
    52,
    229,
    235,
    102,
    232,
    132,
    196,
    120,
    113,
    150,
    64,
    116,
    201,
    241,
    168,
    173,
    10,
    8,
    196,
    136,
    164,
    118,
    75,
    179,
    7,
    183,
    103,
    1,
    27,
    245,
    203,
    230,
    58,
    34,
    138,
    112,
    55,
    254,
    197,
    193,
    215,
    135,
    102,
    145,
    126,
    237,
    183,
    11,
    71,
    213,
    32,
    131,
    139,
    99,
    99,
    208,
    221,
    70,
    214,
    69,
    216,
    189,
    196,
    129,
    53,
    167,
    128,
    60,
    53,
    84,
    102,
    133,
    180,
    149,
    207,
    42,
    175,
    191,
    18,
    79,
    54,
    237,
    29,
    151,
    93,
    4,
    233,
    95,
    27,
    232,
    188,
    80,
    111,
    52,
    110,
    177,
    88,
    242,
    45,
    58,
    155,
    233,
    185,
    219,
    149,
    205,
    63,
    140,
    229,
    173,
    179,
    115,
    3,
    171,
    227,
    16,
    174,
    19,
    170,
    4,
    8,
    104,
    10,
    19,
    237,
    144,
    177,
    214,
    122,
    159,
    170,
    2,
    103,
    25,
    127,
    82,
    37,
    53,
    36,
    85,
    71,
    216,
    230,
    60,
    39,
    207,
    98,
    139,
    166,
    69,
    143,
    108,
    11,
    169,
    167,
    176,
    140,
    213,
    0,
    33,
    235,
    80,
    29,
    26,
    148,
    237,
    31,
    82,
    195,
    160,
    64,
    15,
    81,
    44,
    195,
    118,
    8,
    47,
    99,
    54,
    243,
    224,
    244,
    215,
    230,
    63,
    240,
    130,
    242,
    15,
    107,
    120,
    38,
    135,
    95,
    172,
    214,
    177,
    251,
    146,
    164,
    138,
    21,
    196,
    76,
    15,
    169,
    216,
    229,
    138,
    59,
    206,
    44,
    187,
    52,
    46,
    26,
    87,
    133,
    47,
    174,
    201,
    1,
    213,
    98,
    255,
    97,
    110,
    11,
    50,
    94,
    114,
    216,
    13,
    195,
    31,
    245,
    62,
    226,
    71,
    7,
    126,
    80,
    19,
    182,
    127,
    146,
    109,
    54,
    70,
    108,
    223,
    205,
    215,
    223,
    251,
    72,
    198,
    202,
    162,
    2,
    172,
    58,
    106,
    170,
    226,
    123,
    178,
    171,
    202,
    104,
    235,
    155,
    44,
    63,
    248,
    167,
    235,
    241,
    102,
    181,
    163,
    128,
    203,
    130,
    119,
    165,
    17,
    175,
    134,
    14,
    179,
    10,
    174,
    66,
    176,
    194,
    131,
    242,
    247,
    0,
    225,
    40,
    244,
    204,
    205,
    60,
    250,
    70,
    72,
    189,
    39,
    179,
    197,
    56,
    207,
    39,
    156,
    194,
    93,
    220,
    97,
    160,
    123,
    127,
    68,
    12,
    120,
    232,
    10,
    143,
    24,
    37,
    203,
    26,
    228,
    224,
    173,
    186,
    163,
    30,
    65,
    104,
    140,
    229,
    219,
    140,
    165,
    31,
    0,
    167,
    147,
    244,
    194,
    35,
    13
  ]);
  @override
  String get firebaseAndroidApiKey => _get('FIREBASE_ANDROID_API_KEY');

  @override
  String get firebaseAndroidAppId => _get('FIREBASE_ANDROID_APP_ID');

  @override
  String get firebaseAndroidMessagingSenderId =>
      _get('FIREBASE_ANDROID_MESSAGING_SENDER_ID');

  @override
  String get firebaseAndroidProjectId => _get('FIREBASE_ANDROID_PROJECT_ID');

  @override
  String get firebaseAndroidStorageBucket =>
      _get('FIREBASE_ANDROID_STORAGE_BUCKET');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncrypter.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncrypter.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return parseValue(decryptedValue);
  }
}
